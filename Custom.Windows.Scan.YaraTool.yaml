name: Custom.Windows.Scan.YaraTool
description: |

  This artifact deploys the classic Yara scanner.
    
author: Thomas Benos, @thomasbenos1291

tools:
  - name: yara64
    url: https://github.com/VirusTotal/yara/releases/download/v4.5.1/yara-master-2298-win64.zip
    
precondition: 
  SELECT OS From info() where OS = 'windows'
  
parameters:
  - name: Target
    type: string
    default: C:\
    description: Target directory
  - name: Recurse
    type: bool
    description: Perform recursive scan
    default: TRUE
  - name: YaraFile
    description: If configured will attempt to download Yara rules form Url
    type: upload
  - name: YaraRule
    type: yara
    description: Final Yara option and the default if no other options provided.
    default: |
        rule cobalt_strike_0b8682f_212fff_1 {
           meta:
              description = "cobalt_strike - from files in hashes"
              author = "yarGen Rule Generator"
              reference = "https://github.com/Neo23x0/yarGen"
              date = "2023-12-19"
              hash1 = "0b8682fe1ee1d9a8ad485452179e9c8651c682660591077e0fb7077e89af81bd"
              hash2 = "212fff7721e43dff7db6bd7a5df41d57dac21bbf9a9c7c952e5a4a11092761b7"
              hash3 = "479e4ead60a894c73202faba0c9ebf5762fee19e7d3ceed4af66cf710bb83b05"
              hash4 = "5fac6cd31ff0f16528342db837798bb0767bd8a6747177492df2bf74d4c51dab"
              hash5 = "6f090c1a513f10aaf8d51f740de15f53bd2660ea2b48179dfbb9fd84bd7df807"
              hash6 = "a549cf015c44ad2571cacf2820869e00b44fab9ca95b002a7bdc27e7848e533f"
              hash7 = "b6dac05e61ee711e5e56ab6dea94ae3d400897ecc76544a0c6fd9817ac91ec88"
              hash8 = "cdc057b7c772e3ac5f6074b374c0c7fd7903ca5aa3fa19e45ef9c4921e11c89c"
              hash9 = "fa11e21144149812a1c61c9bf7f8351753aed2348075ced4d6b479e850474969"
           strings:
              $s1 = "AppPolicyGetProcessTerminationMethod" fullword ascii
              $s2 = " Type Descriptor'" fullword ascii
              $s3 = "operator co_await" fullword ascii
              $s4 = "api-ms-win-appmodel-runtime-l1-1-2" fullword wide
              $s5 = " Base Class Descriptor at (" fullword ascii
              $s6 = " Class Hierarchy Descriptor'" fullword ascii
              $s7 = " Complete Object Locator'" fullword ascii
              $s8 = "__swift_1" fullword ascii
              $s9 = " delete[]" fullword ascii
              $s10 = "__swift_2" fullword ascii
              $s11 = "api-ms-win-core-file-l1-2-2" fullword wide 
              $s12 = " delete" fullword ascii
              $s13 = " new[]" fullword ascii
              $s14 = "api-ms-" fullword wide
              $s15 = "ext-ms-" fullword wide
              $s16 = " Base Class Array'" fullword ascii
           condition:
              uint16(0) == 0x5a4d and filesize < 3000KB and ( all of them )
        }
        
sources:
  - query: |
        -- Scan the host
        LET Toolzip <= SELECT OSPath FROM Artifact.Generic.Utils.FetchBinary(ToolName="yara64", IsExecutable=FALSE)
        
        LET TmpDir <= tempdir(remove_last=TRUE)
        
        LET UnzipIt <= SELECT * FROM unzip(filename=Toolzip.OSPath, output_directory=TmpDir)
        
        LET yara_data <= YaraFile || YaraRule
        
        LET yara_rule <= tempfile(remove_last=TRUE, data=yara_data, extension=".yar")
        
        LET ExecYara <= SELECT * FROM execve(argv=filter(list=[
                        "cmd.exe", "/c", "cd", TmpDir, "&&",
                        "yara64.exe",
                        if(condition=Recurse, then="-r", else=""),
                        "-m",
                        yara_rule, Target, ">", "C:\\Windows\\Temp\\output.csv"], 
                        regex="."))

        -- Postprocessing CSV results
        LET results = SELECT * FROM split_records(filenames="C:\\Windows\\Temp\\output.csv", accessor="auto", regex=" " , columns=['Rule', 'Metadata'], count=2)
        
        LET output = SELECT Rule, split(string=Metadata, sep_string=''']''')[0] as Metadata, 
        split(string=Metadata, sep_string=''']''')[1] as File
        FROM results

        --LET files = SELECT File as TriggeredFile FROM output GROUP BY TriggeredFile

        --SELECT TriggeredFile, {SELECT TriggeredRule FROM output WHERE File=TriggeredFile} as TriggeredRules FROM files
        
        LET rules = SELECT Rule as TriggeredRule, Metadata as RuleMetadata FROM output GROUP BY TriggeredRule
        
        SELECT TriggeredRule, RuleMetadata, {SELECT File FROM output WHERE Rule=TriggeredRule} as TriggeredFiles FROM rules
