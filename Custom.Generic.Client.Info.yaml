name: Custom.Generic.Client.Info
description: |
  Collect basic information about the client.

  This artifact is collected when any new client is enrolled into the
  system. Velociraptor will watch for this artifact and populate its
  internal indexes from this artifact as well.

  You can edit this artifact to enhance the client's interrogation
  information as required, by adding new sources.

  NOTE: Do not modify the BasicInformation source since it is used to
  interrogate the clients.

sources:
  - name: BasicInformation
    description: |
      This source is used internally to populate agent info. Do not
      modify or remove this query.
    query: |
        LET Interfaces = SELECT Name, format(format='%02x:%02x:%02x:%02x:%02x:%02x',
            args=HardwareAddr) AS MAC, Addrs.`IP` as `IP`
        FROM interfaces()
        WHERE HardwareAddr
        
        SELECT config.Version.Name AS Name,
               config.Version.BuildTime as BuildTime,
               config.Version.Version as Version,
               config.Version.ci_build_url AS build_url,
               config.Version.install_time as install_time,
               config.Labels AS Labels,
               Hostname, OS, Architecture,
               Platform, PlatformVersion, KernelVersion, Fqdn,
               Interfaces.MAC AS MACAddresses
        FROM info()

  - name: AgentInfo
    description: Specific information about the host
    query: |
        LET ComputerInfo = SELECT {SELECT Hostname FROM info()} as DNSHostName, 
        {SELECT Stdout FROM Artifact.Linux.Sys.BashShell(Command="dnsdomainname")} AS Domain,
        {SELECT Stdout FROM Artifact.Linux.Sys.BashShell(Command="free -b | grep 'Mem:' | awk '{print $2}'")} AS TotalPhysicalMemory,
        {SELECT Stdout FROM Artifact.Linux.Sys.BashShell(Command="users")} AS UserName,
        "Linux Workstation" AS DomainRole
        FROM scope()
        
        LET Interfaces = SELECT Name, HardwareAddr.String As HardwareAddr, Addrs.`IP` as `IP`
           from interfaces() WHERE HardwareAddr
           
        LET NetworkInfo = SELECT 
            Interfaces.`IP` AS IPAddress,
            Interfaces.HardwareAddr AS MACAddress,
            {SELECT Stdout FROM Artifact.Linux.Sys.BashShell(Command="ip route | awk '/^default/ {print $3}' | sort -u")} AS DefaultIPGateway,
            {SELECT Hostname FROM info()} as DNSHostName,
            {SELECT Stdout FROM Artifact.Linux.Sys.BashShell(Command="grep -Eo 'nameserver [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' /etc/resolv.conf | awk '{print $2}'")} AS DNSServerSearchOrder
            FROM scope()
        
        LET LinuxInfo = SELECT
            {SELECT DNSHostName, Domain, TotalPhysicalMemory, split(string=UserName, sep=" ") as UserName, DomainRole FROM ComputerInfo} AS `Computer Info`,
            {SELECT 
                --join(array=IPAddress, sep=", ") 
                IPAddress[0] AS IPAddresses,
                join(array=MACAddress, sep=", ") AS MACAddress,
                DefaultIPGateway, DNSHostName, DNSServerSearchOrder
                FROM NetworkInfo} AS `Network Info`      
        FROM scope()
    
        LET DomainLookup <= dict(
         `0`='Standalone Workstation',
         `1`='Member Workstation',
         `2`='Standalone Server',
         `3`='Member Server',
         `4`='Backup Domain Controller',
         `5`='Primary Domain Controller')

        LET WindowsInfo = SELECT
          {
            SELECT DNSHostName, Name, Domain, TotalPhysicalMemory, UserName,
                   get(item=DomainLookup,
                       field=str(str=DomainRole), default="Unknown") AS DomainRole
            FROM wmi(
               query='SELECT * FROM win32_computersystem')
          } AS `Computer Info`,
          {
            SELECT Caption,
               --join(array=IPAddress, sep=", ")
               IPAddress AS IPAddresses,
               join(array=IPSubnet, sep=", ") AS IPSubnet,
               MACAddress,
               join(array=DefaultIPGateway, sep=", ") AS DefaultIPGateway,
               DNSHostName,
               join(array=DNSServerSearchOrder, sep=", ") AS DNSServerSearchOrder
            FROM wmi(
               query="SELECT * from Win32_NetworkAdapterConfiguration" )
            WHERE IPAddress
          } AS `Network Info`
        FROM scope()
      
        SELECT * FROM if(
            condition={SELECT OS FROM info() where OS='windows'},
            then={SELECT * FROM WindowsInfo},
            else={SELECT * FROM LinuxInfo}
        )
           
    notebook:
      - type: vql_suggestion
        name: "Enumerate Domain Roles"
        template: |
          /*
          # Enumerate Domain Roles

          Search all clients' enrollment information for their domain roles.
          */
          --
          -- Remove the below comments to label Domain Controllers
          SELECT *--, label(client_id=client_id, labels="DomainController", op="set") AS Label
          FROM foreach(row={
             SELECT * FROM clients()
          }, query={
              SELECT
                `Computer Info`.Name AS Name, client_id,
                `Computer Info`.DomainRole AS DomainRole
              FROM source(client_id=client_id,
                  flow_id=last_interrogate_flow_id,
                  artifact="Generic.Client.Info/WindowsInfo")
          })
          -- WHERE DomainRole =~ "Controller"

  - name: Users
    query: |
      SELECT * FROM if(
        condition={SELECT OS From info() where OS = 'windows'},
        then={SELECT Name, Description, Mtime AS LastLogin FROM Artifact.Windows.Sys.Users()},
        else={SELECT * FROM Artifact.Linux.Sys.Users()}
      )
      
  - name: Processes
    query: |
        SELECT * FROM if(
        condition={SELECT OS From info() where OS = 'windows'},
        then={SELECT 
        Pid,
        Ppid,
        TokenIsElevated,
        Name,
        CommandLine,
        Exe,
        TokenInfo as _TokenInfo,
        Hash,
        Authenticode,
        Username,
        WorkingSetSize as _WorkingSetSize,
        {SELECT * from Artifact.Server.Enrichment.MalwareBazaar(Hash=Hash.SHA256)} as MalwareBazaar
        FROM Artifact.Windows.System.Pslist()},
        else={SELECT * FROM Artifact.Linux.Sys.Pslist()})

  - name: Network_Connections
    query: |
        SELECT * FROM if(
        condition={SELECT OS From info() where OS = 'windows'},
        then={SELECT *,
        {SELECT * FROM Artifact.Server.Enrichment.ThreatFox(IOC=DestIP,IOCType="IOC") WHERE NOT IOC=NULL} as ThreatFoxIPAnalysis 
        FROM Artifact.Windows.Network.NetstatEnriched()},
        else={SELECT * FROM Artifact.Linux.Network.NetstatEnriched()}
        )
        
reports:
  - type: CLIENT
    template: |
      {{ $client_info := Query "SELECT * FROM clients(client_id=ClientId) LIMIT 1" | Expand }}

      {{ $flow_id := Query "SELECT timestamp(epoch=active_time / 1000000) AS Timestamp FROM flows(client_id=ClientId, flow_id=FlowId)" | Expand }}

      # {{ Get $client_info "0.os_info.fqdn" }} ( {{ Get $client_info "0.client_id" }} ) @ {{ Get $flow_id "0.Timestamp" }}

      {{ Query "SELECT * FROM source(source='BasicInformation')" | Table }}

      # Memory and CPU footprint over the past 24 hours

      {{ define "resources" }}
       SELECT * FROM sample(
         n=4,
         query={
           SELECT Timestamp, rate(x=CPU, y=Timestamp) * 100 As CPUPercent,
                  RSS / 1000000 AS MemoryUse
           FROM source(artifact="Generic.Client.Stats",
                       client_id=ClientId,
                       start_time=now() - 86400)
           WHERE CPUPercent >= 0
         })
      {{ end }}

      <div>
      {{ Query "resources" | LineChart "xaxis_mode" "time" "RSS.yaxis" 2 }}
      </div>

      # Agent information
      {{ $agent_info := Query "SELECT * FROM source(source='AgentInfo')" }}
      {{ if $agent_info }}
        {{ $agent_info | Table }}
      {{ end }}
      
      # Active Users
      {{ Query "SELECT * FROM source(source='Users')" | Table }}

      # Processes
      {{ Query "SELECT * FROM source(source='Processes')" | Table }}
      
      # Network Connections
      {{ Query "SELECT * FROM source(source='Network_Connections')" | Table }}
      
      
column_types:
  - name: BuildTime
    type: timestamp
  - name: LastLogin
    type: timestamp
