name: Server.Windows.Scan.CobaltStrikeParserMaster
description: |

  This artifact deploys CobaltStrikeParser-master in order to scan PEs, memory dumps or urls for Cobalt Strike beacons and parse their configuration.
  
  Python and the tool must be first uploaded and installed properly on a directory on the server.
  
  You can use it as enrichment for uploaded files to server, or for urls.
  
  Example usage:
  
  SELECT *, 
  {SELECT * FROM Artifact.Server.Linux.Scan.CobaltStrikeParserMaster(Ioc=str(str=https://+DestIP+DestPort))} as CobaltConfig
  FROM source(artifact="Windows.Network.NetstatEnriched")

type: SERVER 

precondition: 
        SELECT OS From info() where OS = 'windows'
        
reference:
    - https://github.com/Sentinel-One/CobaltStrikeParser

author: Thomas Benos @thomasbenos1291

parameters:
  - name: PythonExeWindows
    type: string
    description: The python binary absolute path for the Windows Velociraptor Server
    default: 'C:\Users\Administrator\AppData\Local\Programs\Python\Python312\python.exe'
  - name: ToolDirectoryWindows
    default: 'C:\Program Files\Velociraptor\Tools\CobaltStrikeParser-master'
    description: The directory of the tool on the server
  - name: Ioc
    type: string
    description: The IOC to be scanned (filepath or url, starting with http)
  - name: PowershellCommand
    type: hidden
    default: |
        # Read the content of the text file
        $fileContent = Get-Content -Path "C:\Windows\Temp\cobaltconfig.txt"
        
        # Create an empty ordered hashtable to store key-value pairs
        $hashTable = [ordered]@{}
        
        # Initialize a variable to store the previous key
        $prevKey = ""
        
        # Iterate over each line in the file content
        foreach ($line in $fileContent) {
            # Split the line into key and value
            $key, $value = $line -split "\s+-\s+"
            
            # Trim leading and trailing spaces from key and value
            $key = $key.Trim()
            $value = $value.Trim()
        
            # Check if there is no value
            if (-not $value) {
                # Append the current key to the previous key's value
                $hashTable[$prevKey] += " $key"
            } else {
                # Add key-value pair to the ordered hashtable
                $hashTable[$key] = $value
                # Store the current key as the previous key
                $prevKey = $key
            }
        }
        
        # Convert the ordered hashtable to JSON format
        $jsonContent = $hashTable | ConvertTo-Json
        
        # Save the JSON content to a file
        $jsonContent | Out-File -FilePath "C:\Windows\Temp\cobaltconfig.json"
sources:
  - query: |
        -- Clear the last file
         LET _ <= SELECT * FROM Artifact.Windows.Sys.CmdShell(Command="echo. > C:\Windows\Temp\cobaltconfig.txt")
         WHERE log(message="Clearing last results txt")
         
         LET _ <= SELECT * FROM Artifact.Windows.Sys.CmdShell(Command="echo. > C:\Windows\Temp\cobaltconfig.json")
         WHERE log(message="Clearing last results json")
        
        -- Execute the tool
         LET Exec <= 
         SELECT * FROM execve(argv=["powershell", "/c", PythonExeWindows,
                        "parse_beacon_config\.py", Ioc, 
                        "|", "Tee-Object", "-FilePath", "C:\\Windows\\Temp\\cobaltconfig.txt"
                        ], 
                        cwd=ToolDirectoryWindows
                        --, sep="|"
                        )
                        WHERE log(message=Stdout) or log(message=Stderr) 
         
                   
         LET ParseTheTxt <= SELECT * FROM execve(argv=["powershell",
            "-ExecutionPolicy", "Unrestricted", "-encodedCommand",
            base64encode(string=utf16_encode(string=PowershellCommand))
          ]) WHERE log(message=Stdout) or log(message=Stderr)
            
          
          LET config <= SELECT Stdout FROM execve(argv=["powershell", "/c", "type", "C:\\Windows\\Temp\\cobaltconfig.json"])
          WHERE log(message=Stdout) or log(message=Stderr)
          
          SELECT Ioc, parse_json(data=config[0].Stdout) as CobaltStrikeConfig FROM scope()
