name: Windows.Scan.LokiEnriched
description: |

  This artifact deploys a Loki scanner and search for IOCs. 
  Based on the artifact developed by Eduardo Mattos - @eduardfir
  and Xavier Mertens @xme.
  
  NOTE: This artifact usually transfers a lot of data. You should increase the default timeout to allow it to complete.
  
  usage: loki.exe [-h] [-p path] [-s kilobyte] [-l log-file] [-r remote-loghost] [-t remote-syslog-port]
                [-a alert-level] [-w warning-level] [-n notice-level] [--allhds] [--alldrives] [--printall]
                [--allreasons] [--noprocscan] [--nofilescan] [--vulnchecks] [--nolevcheck] [--scriptanalysis]
                [--rootkit] [--noindicator] [--dontwait] [--intense] [--csv] [--onlyrelevant] [--nolog] [--update]
                [--debug] [--maxworkingset MAXWORKINGSET] [--syslogtcp] [--logfolder log-folder] [--nopesieve]
                [--pesieveshellc] [--python PYTHON] [--nolisten] [--excludeprocess EXCLUDEPROCESS] [--force]
                [--version]

    
author: Thomas Benos @thomasbenos1291

reference: 
    - https://github.com/Neo23x0/signature-base
    - https://blog.rootshell.be/2021/12/21/velociraptor-loki/
    - https://github.com/eduardomcm/VelociraptorCompetition/blob/main/Windows.Scanner.Loki.yaml
    - https://github.com/Neo23x0/Loki

tools:
  - name: loki_0.51.0
    url: https://github.com/Neo23x0/Loki/releases/download/v0.51.0/loki_0.51.0.zip
  - name: signaturebase
    url: https://github.com/Neo23x0/signature-base/archive/refs/heads/master.zip

precondition: 
  SELECT OS From info() where OS = 'windows'
  
parameters:
  - name: LokiParameters
    type: string
    default: "-p C:\\ --vulnchecks --intense --onlyrelevant"
    
sources:
  - query: |
        
        LET KillLoki <= SELECT * FROM execve(argv=filter(list=["cmd.exe", "/c", "taskkill", "/F", "/IM", "loki.exe"], 
               regex=".")) WHERE log(message=Stdout)
 
         //Download the tool in .zip
        LET Toolzip <= 
        SELECT OSPath FROM Artifact.Generic.Utils.FetchBinary(ToolName="loki_0.51.0", IsExecutable=FALSE)
        WHERE log(message= "OSPath of the tool is " + OSPath)
        
        LET SignaturesZip <= 
        SELECT OSPath FROM Artifact.Generic.Utils.FetchBinary(ToolName="signaturebase", IsExecutable=FALSE)
        WHERE log(message= "OSPath of the signaturebase is " + OSPath)
        
        LET TmpDir = tempdir(remove_last=TRUE)
        LET Hostname <= SELECT Hostname as Host FROM info()
        LET LogFile <= tempfile(extension=".csv", remove_last=TRUE)
        LET UnzipIt <= 
        SELECT * FROM unzip(filename=Toolzip[0].OSPath, output_directory=TmpDir)
        WHERE log(message= "OSPath to unzip is " + OSPath)
        
        LET LokiPath = 
        SELECT NewPath FROM UnzipIt WHERE NewPath=~'''\\loki\.exe$'''
        
        LET UpgraderPath = 
        SELECT NewPath FROM UnzipIt WHERE NewPath=~'''\\loki-upgrader\.exe$'''
        
        LET UnzipSignatures <= 
        SELECT * FROM unzip(filename=SignaturesZip[0].OSPath, output_directory=dirname(path=UpgraderPath[0].NewPath))
        WHERE log(message= "OSPath to unzip is " + OSPath)
        
        LET SignatureBasePath <=
        SELECT dirname(path=LokiPath[0].NewPath) as Folder FROM UnzipSignatures LIMIT 1
        
        LET _ <= 
            SELECT * FROM execve(cwd=str(str=SignatureBasePath[0].Folder), argv=["cmd.exe", "/c", "ren", "signature-base-master", "signature-base"])
        
        LET Command = ".\\loki.exe "+LokiParameters+" --csv -l "+LogFile+" --noindicator --dontwait"
        
        LET ExecLoki <= 
        SELECT * FROM execve(cwd=SignatureBasePath[0].Folder, argv=["cmd.exe", "/c", Command]) WHERE log(message=Stdout) AND log(message=Stderr)
                        
        --parse the result
        SELECT * FROM foreach(row=ExecLoki,
            query={
        SELECT Time, Hostname, DetectionType, ScanType, 
        if(condition=parse_string_with_regex(string=Detection, regex='''(?:REASON_1:\s)(.*?)(?:REASON_2:|$)''').g1 = NULL, then=Detection) as Information,
        parse_string_with_regex(string=Detection, regex='''FILE:\s(.*?)\s''').g1 as File,
        parse_string_with_regex(string=Detection, regex='''\bSCORE\b:\s(.*?)\s''').g1 as Score,
        parse_string_with_regex(string=Detection, regex='''TYPE:\s(.*?)\s''').g1 as Type,
        parse_string_with_regex(string=Detection, regex='''SIZE:\s(.*?)\s''').g1 as Size,
        parse_string_with_regex(string=Detection, regex='''SHA256:\s(.*?)\s''').g1 as SHA256,
        parse_string_with_regex(string=Detection, regex='''(?:REASON_1:\s)(.*?)(?:REASON_2:|$)''').g1 as Detection1,
        parse_string_with_regex(string=Detection, regex='''(?:REASON_2:\s)(.*?)(?:REASON_3:|$)''').g1 as Detection2
        //parse_string_with_regex(string=Detection, regex='''(?:REASON_3:\s)(.*?)(?:REASON_4:|$)''').g1 as Detection3,
        //parse_string_with_regex(string=Detection, regex='''(?:REASON_4:\s)(.*?)(?:REASON_5:|$)''').g1 as Detection4,
        //parse_string_with_regex(string=Detection, regex='''(?:REASON_5:\s)(.*?)(?:REASON_6:|$)''').g1 as Detection5
            FROM split_records(filenames=LogFile, accessor="auto", regex="," , 
                columns=['Time', 'Hostname', 'DetectionType', 'ScanType', 'Detection'], count=5)})
        
