name: Custom.Windows.Sysinternals.SysmonInstall
description: |
  Sysmon is a kernel level system monitor written by
  Sysinternals. While we are not able to distribute Sysmon ourselves,
  Velociraptor can help you manage its deployment and installation.

  NOTE: By default we install the sysmon config from SwiftOnSecurity -
  we recommend you review the config file and override it in the GUI
  with one that better suits your needs.

tools:
  - name: SysmonBinary
    serve_locally: true

  - name: SysmonConfig
    serve_locally: true

  - name: SysmonEula
    serve_locally: true
    
  - name: SysmonOldBinary
    serve_locally: true
  
precondition: SELECT OS From info() where OS = 'windows'

required_permissions:
- EXECVE

sources:
- query: |
    //- name: SysmonOldVersion
    //url: \\udc1.ucd.soc\SYSVOL\ucd.soc\Sysmon\Sysmon64.exe
    //serve_locally: true
    
    LET sysmon_binary = SELECT * FROM Artifact.Generic.Utils.FetchBinary(ToolName="SysmonBinary")
    
    LET bin <= SELECT * FROM switch(
    a={
      SELECT * FROM glob(globs="C:/Windows/Sysmon64.exe")
    }, b=sysmon_binary)
    
    LET existing_hash = SELECT lowcase(
       string=parse_string_with_regex(
          string=Stdout, regex="hash:.+SHA256=([^\\n\\r]+)").g1) AS Hash
    FROM execve(argv=[bin[0].FullPath, "-c"])
    
    LET sysmon_old = SELECT * FROM Artifact.Generic.Utils.FetchBinary(ToolName="SysmonOldBinary")

    LET sysmon_config = SELECT * FROM Artifact.Generic.Utils.FetchBinary(
       ToolName="SysmonConfig", IsExecutable=FALSE)

    LET eula = SELECT * FROM Artifact.Generic.Utils.FetchBinary(
       ToolName="SysmonEula", IsExecutable=FALSE)
       
    LET service_status= SELECT State
    FROM Artifact.Windows.System.Services()
    WHERE Name =~ "Sysmon64" 
    AND State = "Running"
 
    //LET if_running = SELECT val FROM if(
    //condition=service_status,
    //then={
    // SELECT 1 AS val from scope()
    //},
    //else={
    //SELECT 0 AS val from scope()
    //}
    //)
    
    LET ensure_service_running = //SELECT * FROM chain (
       //a={
       
        SELECT * FROM execve(argv=["sc.exe", "start", "sysmon64"])
           
      // },
       
       //b={
       
        //SELECT * FROM Artifact.Custom.Windows.System.PowerShell.SysmonConfigView

      // }
    //)
    
    LET change_hash_message=log(message="Sysmon config hash has changed (%v vs %v) - reinstalling",
                    args=[existing_hash[0].Hash, Tool_SysmonConfig_HASH])
                    
    LET not_changed_hash_message=log(message="Existing sysmon config hash has not changed (%v) - skipping reinstall",
                    args=Tool_SysmonConfig_HASH)
                    
    LET not_fetched_tools=log(message="Failed to fetch sysmon tools!")
    
    LET sysmon_is_running=log(message="Sysmon is running")
    
    LET doit = SELECT * FROM chain(
    a={SELECT * FROM change_hash_message},
    b={
       // First force an uninstall to clear the previous config
       //SELECT * FROM execve(argv= [ bin[0].FullPath, "-u"], length=10000000)
       SELECT * FROM execve(argv= [sysmon_old[0].FullPath, "-u"], length=10000000) 
    },
    c={
       //SELECT * FROM execve(argv=["cmd.exe", "/c", "copy.exe", "E:\\TEMP\\sysmonconfig.xml", "C:\\Sysmon\\"], length=10000000)
       //SELECT * FROM execve(argv=["C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-ExecutionPolicy", "Unrestricted", 
       //"-Command", "Copy-Item", sysmon_config[0].FullPath, "C:\\Sysmon"], length=10000000)
       SELECT copy(filename=sysmon_config[0].FullPath, accessor="ntfs", dest="C:/Windows/sysmonconfig.xml") FROM scope()
    }, 
    d={
       SELECT copy(filename=eula[0].FullPath, accessor="ntfs", dest="C:/Windows/Eula.txt") FROM scope()
    }, 
    e={
       SELECT copy(filename=sysmon_binary[0].FullPath, accessor="ntfs", dest="C:/Windows/Sysmon64.exe") FROM scope()
    }, 
    f={
       SELECT * FROM execve(argv= ["C:/Windows/Sysmon64.exe",
       //sysmon_binary[0].FullPath, 
       "-accepteula", "-i", "C:/Windows/sysmonconfig.xml"], length=10000000)
    }, 
    g=ensure_service_running)

    // Only install sysmon if the existing config hash is not the same
    // as the specified hash.
    
    //LET sysmon_service = SELECT * FROM Artifact.Custom.Windows.System.Services.Sysmon
    //    
    //
    
    //LET compare_hash = SELECT check FROM if(
     //      condition=existing_hash[0].Hash != Tool_SysmonConfig_HASH,
     //      then={
     //           SELECT * FROM chain(
     //           a={log(message="Sysmon config hash has changed (%v vs %v) - reinstalling",
     //               args=[existing_hash[0].Hash, Tool_SysmonConfig_HASH]},
     //           b={SELECT 1 as check FROM scope()}
     //           },
     //      else={
      //          SELECT * FROM chain(
     //           a={log(message="Existing sysmon config hash has not changed (%v) - skipping reinstall",
      //              args=Tool_SysmonConfig_HASH},
      //          b={SELECT 0 as check FROM scope()}
      //          }
      //    )
    //condition=if(
        //condition=sysmon_binary AND sysmon_config AND eula AND sysmon_old,
        //else=log(message="Failed to fetch sysmon tools!")
        //,
        //then=if(
        //Check if Sysmon is ensure_service_running
        //  
        
        //   condition=existing_hash[0].Hash != Tool_SysmonConfig_HASH,
        //   then=log(message="Sysmon config hash has changed (%v vs %v) - reinstalling",
        //            args=[existing_hash[0].Hash, Tool_SysmonConfig_HASH]),
        //   else=log(message="Existing sysmon config hash has not changed (%v) - skipping reinstall",
        //            args=Tool_SysmonConfig_HASH) AND FALSE
        //  )
        //),
    //then={ SELECT * FROM doit },
    //else={ SELECT * FROM ensure_service_running })

    SELECT * FROM if(
    //Check if all tools are successfully fetched
    condition=sysmon_binary AND sysmon_config AND eula AND sysmon_old,
    then={
        SELECT * FROM if(
        //Check if Sysmon is running or if the version is old
        condition=service_status,
        then={
             SELECT * FROM if(
             //Check if Sysmon is running old version
             condition=existing_hash[0].Hash != Tool_SysmonConfig_HASH,
             then={
                SELECT * FROM doit 
                },
             else={
             //If configuration has not changed, skip reinstall
                SELECT * FROM not_changed_hash_message
                //SELECT * FROM sysmon_is_running
        
                }
             )
        },
        else={
        //Reinstall if Sysmon is not running
            SELECT * FROM doit
        }
        )
    },
    else={
        SELECT * FROM not_fetched_tools
    }
    )