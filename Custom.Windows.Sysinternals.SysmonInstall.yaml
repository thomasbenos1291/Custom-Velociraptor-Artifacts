name: Custom.Windows.Sysinternals.SysmonInstall
description: |
  Sysmon is a kernel level system monitor written by
  Sysinternals. While we are not able to distribute Sysmon ourselves,
  Velociraptor can help you manage its deployment and installation.

  NOTE: By default we install the sysmon config from SwiftOnSecurity -
  we recommend you review the config file and override it in the GUI
  with one that better suits your needs.

  This artifact is modified so that you include the old Sysmon binary in order to uninstall current Sysmon version,
  copies the files into C:\Windows and installs sysmon, provided the new sysmon binary or configuration are different.

author: Thomas Benos, @thomasbenos1291

tools:
  - name: SysmonBinary
    serve_locally: true

  - name: SysmonConfig
    serve_locally: true

  - name: SysmonEula
    serve_locally: true
    
  - name: SysmonOldBinary
    serve_locally: true
  
precondition: SELECT OS From info() where OS = 'windows'

required_permissions:
- EXECVE

sources:
- query: |
    
    LET sysmon_binary = SELECT * FROM Artifact.Generic.Utils.FetchBinary(ToolName="SysmonBinary")
    
    LET bin <= SELECT * FROM switch(
    a={
      SELECT * FROM glob(globs="C:/Windows/Sysmon64.exe")
    }, b=sysmon_binary)
    
    LET existing_hash = 
    SELECT lowcase(
           string=parse_string_with_regex(
              string=Stdout, regex="hash:.+SHA256=([^\\n\\r]+)").g1) AS Hash
              FROM execve(argv=["powershell\.exe", "/c", bin[0].OSPath, "-c", "|", "findstr", "SHA256", "|", "findstr", "Config"])
    
    LET sysmon_old = SELECT * FROM Artifact.Generic.Utils.FetchBinary(ToolName="SysmonOldBinary")

    LET sysmon_config = SELECT * FROM Artifact.Generic.Utils.FetchBinary(
       ToolName="SysmonConfig", IsExecutable=FALSE)

    LET eula = SELECT * FROM Artifact.Generic.Utils.FetchBinary(
       ToolName="SysmonEula", IsExecutable=FALSE)
       
    LET service_status= SELECT State
    FROM Artifact.Windows.System.Services()
    WHERE Name =~ "Sysmon64" 
    AND State = "Running"
 
    
    LET ensure_service_running = SELECT * FROM execve(argv=["sc.exe", "start", "sysmon64"])
           
    
    LET change_hash_message=log(message="Sysmon config hash has changed (%v vs %v) - reinstalling",
                    args=[existing_hash[0].Hash, Tool_SysmonConfig_HASH])
                    
    LET not_changed_hash_message=log(message="Existing sysmon config hash has not changed (%v) - skipping reinstall",
                    args=Tool_SysmonConfig_HASH)
                    
    LET not_fetched_tools=log(message="Failed to fetch sysmon tools!")
    
    LET sysmon_is_running=log(message="Sysmon is running")
    
    LET doit = SELECT * FROM chain(
    a={SELECT * FROM change_hash_message},
    b={
       // First force an uninstall to clear the previous config
       SELECT * FROM execve(argv= [sysmon_old[0].FullPath, "-u"], length=10000000) 
    },
    c={
       SELECT copy(filename=sysmon_config[0].FullPath, accessor="ntfs", dest="C:/Windows/sysmonconfig.xml") FROM scope()
    }, 
    d={
       SELECT copy(filename=eula[0].FullPath, accessor="ntfs", dest="C:/Windows/Eula.txt") FROM scope()
    }, 
    e={
       SELECT copy(filename=sysmon_binary[0].FullPath, accessor="ntfs", dest="C:/Windows/Sysmon64.exe") FROM scope()
    }, 
    f={
       SELECT * FROM execve(argv= ["C:/Windows/Sysmon64.exe",
       //sysmon_binary[0].FullPath, 
       "-accepteula", "-i", "C:/Windows/sysmonconfig.xml"], length=10000000)
    }, 
    g=ensure_service_running)

    // Only install sysmon if the existing config hash is not the same
    // as the specified hash.

    SELECT * FROM if(
    //Check if all tools are successfully fetched
    condition=sysmon_binary AND sysmon_config AND eula AND sysmon_old,
    then={
        SELECT * FROM if(
        //Check if Sysmon is running or if the version is old
        condition=service_status,
        then={
             SELECT * FROM if(
             //Check if Sysmon is running old version
             condition=existing_hash[0].Hash != Tool_SysmonConfig_HASH,
             then={
                SELECT * FROM doit 
                },
             else={
             //If configuration has not changed, skip reinstall
                SELECT * FROM not_changed_hash_message

                }
             )
        },
        else={
        //Reinstall if Sysmon is not running
            SELECT * FROM doit
        }
        )
    },
    else={
        SELECT * FROM not_fetched_tools
    }
    )
