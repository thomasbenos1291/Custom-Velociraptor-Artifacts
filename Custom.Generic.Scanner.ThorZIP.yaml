name: Custom.Generic.Scanner.ThorZIP
description: |
   Generic artifact for THOR (LITE) forensic scanner (https://www.nextron-systems.com/thor/) running on Windows, Linux and Darwin systems.
   <br/>Mostly made for THOR LITE, for THOR enterprise see Generic.Scanner.Thor.
   
   This arifact expects a ZIP with THOR (LITE) binaries, licenses and signatures via the "tools" config 'ThorZIP'.
   <br/>ZIP file is downloaded to client host, unzipped and based on OS and architecture the right file is executed.

   Caution: 
   <br/>THOR might exceed the default "Max Execution Time in Seconds", we suggest setting it to 30000 sec (~8.5h).
   <br/>Since THOR monitors itself and the system regarding resource usage and limits, additional "resource limits" in the Hunt settings are not needed.

   Reports (.html/.txt/.json) are uploaded to Velociraptor server.
   <br/>The THOR json log and the number of alerts/warnings/notices/errors can be found in the Flow details "Results" tab or in the Hunt "Notebook". 
   This allows a quick triage.

type: CLIENT

precondition: SELECT OS FROM info() where OS = 'windows' or OS = "linux" or OS = "darwin"

tools:
  - name: ThorZIP

parameters:
  - name: CMDLine
    description: Thor command line flags. In most cases leaving empty is fine, see https://thor-manual.nextron-systems.com/en/latest/usage/scan.html#scan for more informations.
    default: ""
  - name: UpdateFirst
    description: If selected, will update THOR signatures
    type: bool
    default: Y

sources:
    - name: ThorExec
      description: Executes THOR with the given parameters and uploads reports.
      query: |
        LET Arch <= SELECT Architecture FROM info()
        LET Thorzip <= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName="ThorZIP", IsExecutable=FALSE)
        LET TmpDir <= tempdir(remove_last=TRUE)
        LET Unzip <= SELECT * FROM unzip(filename=Thorzip.FullPath, output_directory=TmpDir)

        LET Executable <= SELECT F FROM switch(
          a={
            SELECT TmpDir + if(condition=Arch["Architecture"] =~ "amd64", then="\\thor64-lite.exe", else="\\thor-lite.exe") as F FROM info() WHERE OS = "windows"
          },
          b={
            SELECT TmpDir + if(condition=Arch["Architecture"] =~ "amd64", then="/thor-lite-linux-64", else="/thor-lite-linux") as F FROM info() WHERE OS = "linux"
          },
          c={
            SELECT TmpDir + "/thor-lite-macosx" as F FROM info() WHERE OS = "darwin"
          }
        )

        LET CMDs <= SELECT C FROM switch (
          a={
            SELECT commandline_split(command=CMDLine) as C FROM info() WHERE OS = "windows"
          },
          b={
            SELECT commandline_split(command=CMDLine, bash_style=TRUE) as C FROM info() WHERE OS = "linux" OR OS = "darwin"
          }
        )

        LET Chmod <= SELECT * FROM if(
          condition={SELECT OS FROM info() WHERE NOT OS =~ "windows" },
          then={SELECT * FROM execve(argv=["chmod", "+x", Executable[0].F])}
        )
        
        LET thor_lite_util <= SELECT U FROM switch(
          a={
            SELECT TmpDir + "\\thor-lite-util.exe" as U FROM info() WHERE OS = "windows"
          },
          b={
            SELECT TmpDir + "\\thor-lite-linux-util.exe" as U FROM info() WHERE OS = "linux"
          },
          c={
            SELECT TmpDir + "/thor-lite-macosx-util" as U FROM info() WHERE OS = "darwin"
          }
        )
        
        LET Update <= if(condition=UpdateFirst, then={SELECT * FROM execve(argv=[thor_lite_util[0].U, "update"]) WHERE log(message=Stdout)})

        LET Exec <= SELECT * FROM execve(argv=array(
          a=[(Executable[0]).F, "--json", "-e", TmpDir], 
          b=[if(condition= CMDLine = "" OR CMDLine = "." OR CMDLine = " ", then=[], else=(CMDs[0]).C)]
          )
        ) 
        //added stdout as log message
        WHERE log(message=Stdout)

        --LET Uploaded <= SELECT Name, upload(file=OSPath) as FileDetails FROM glob(globs="/*", root=TmpDir) WHERE Name =~ "(csv|txt|html|json)$"

        LET Numbers <= parse_string_with_regex(string=Exec.Stdout, regex='''ALERTS: (?P<Alerts>\d*) WARNINGS: (?P<Warnings>\d*) NOTICES: (?P<Notices>\d*) ERRORS: (?P<Errors>\d*)''')
        SELECT * FROM Numbers

    - name: ThorResultsJson
      description: THOR results in JSON.
      query: |
        LET JsonFile <= SELECT OSPath, Size FROM glob(globs="/*", root=TmpDir) WHERE Name =~ "json$" LIMIT 1
        LET FileContent <= read_file(filename=JsonFile[0].OSPath, length=atoi(string=JsonFile[0].Size))
        LET results = 
        SELECT parse_json(data=_value) as Line FROM foreach(row=split(string=FileContent, sep="\n"))
        
        SELECT Line.time as time,
        Line.hostname as hostname,
        Line.level as level,
        Line.module as module,
        Line.message as message, 
        Line.score as score,
        Line as Event
        FROM results
        --WHERE NOT level=~'''info''' 
        --AND score